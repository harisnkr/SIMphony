{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\haria\\\\SIMphony\\\\src\\\\pages\\\\NewsScreen.js\";\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Calendar, CalendarList, Agenda } from 'react-native-calendars';\n\nvar NewsScreen = function (_Component) {\n  _inherits(NewsScreen, _Component);\n\n  function NewsScreen(props) {\n    var _this;\n\n    _classCallCheck(this, NewsScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NewsScreen).call(this, props));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(NewsScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        }\n      }, React.createElement(Agenda, {\n        items: {\n          '2012-05-22': [{\n            name: 'item 1 - any js object'\n          }],\n          '2012-05-23': [{\n            name: 'item 2 - any js object',\n            height: 80\n          }],\n          '2012-05-24': [],\n          '2012-05-25': [{\n            name: 'item 3 - any js object'\n          }, {\n            name: 'any js object'\n          }]\n        },\n        loadItemsForMonth: function loadItemsForMonth(month) {\n          console.log('trigger items loading');\n        },\n        onCalendarToggled: function onCalendarToggled(calendarOpened) {\n          console.log(calendarOpened);\n        },\n        onDayPress: function onDayPress(day) {\n          console.log('day pressed');\n        },\n        onDayChange: function onDayChange(day) {\n          console.log('day changed');\n        },\n        selected: '2012-05-16',\n        minDate: '2012-05-10',\n        maxDate: '2012-05-30',\n        pastScrollRange: 50,\n        futureScrollRange: 50,\n        renderItem: function renderItem(item, firstItemInDay) {\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44\n            }\n          });\n        },\n        renderDay: function renderDay(day, item) {\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            }\n          });\n        },\n        renderEmptyDate: function renderEmptyDate() {\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48\n            }\n          });\n        },\n        renderKnob: function renderKnob() {\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50\n            }\n          });\n        },\n        renderEmptyData: function renderEmptyData() {\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            }\n          });\n        },\n        rowHasChanged: function rowHasChanged(r1, r2) {\n          return r1.text !== r2.text;\n        },\n        hideKnob: true,\n        markedDates: {\n          '2012-05-16': {\n            selected: true,\n            marked: true\n          },\n          '2012-05-17': {\n            marked: true\n          },\n          '2012-05-18': {\n            disabled: true\n          }\n        },\n        disabledByDefault: true,\n        onRefresh: function onRefresh() {\n          return console.log('refreshing...');\n        },\n        refreshing: false,\n        refreshControl: null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        }\n      }));\n    }\n  }]);\n\n  return NewsScreen;\n}(Component);\n\nexport { NewsScreen as default };","map":{"version":3,"sources":["C:/Users/haria/SIMphony/src/pages/NewsScreen.js"],"names":["React","Component","Calendar","CalendarList","Agenda","NewsScreen","props","state","name","height","month","console","log","calendarOpened","day","item","firstItemInDay","r1","r2","text","selected","marked","disabled"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport { Calendar, CalendarList, Agenda } from 'react-native-calendars';\r\n\r\nexport default class NewsScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <View>\r\n                <Agenda\r\n                    // The list of items that have to be displayed in agenda. If you want to render item as empty date\r\n                    // the value of date key has to be an empty array []. If there exists no value for date key it is\r\n                    // considered that the date in question is not yet loaded\r\n                    items={{\r\n                        '2012-05-22': [{ name: 'item 1 - any js object' }],\r\n                        '2012-05-23': [{ name: 'item 2 - any js object', height: 80 }],\r\n                        '2012-05-24': [],\r\n                        '2012-05-25': [{ name: 'item 3 - any js object' }, { name: 'any js object' }]\r\n                    }}\r\n                    // Callback that gets called when items for a certain month should be loaded (month became visible)\r\n                    loadItemsForMonth={(month) => { console.log('trigger items loading') }}\r\n                    // Callback that fires when the calendar is opened or closed\r\n                    onCalendarToggled={(calendarOpened) => { console.log(calendarOpened) }}\r\n                    // Callback that gets called on day press\r\n                    onDayPress={(day) => { console.log('day pressed') }}\r\n                    // Callback that gets called when day changes while scrolling agenda list\r\n                    onDayChange={(day) => { console.log('day changed') }}\r\n                    // Initially selected day\r\n                    selected={'2012-05-16'}\r\n                    // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n                    minDate={'2012-05-10'}\r\n                    // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n                    maxDate={'2012-05-30'}\r\n                    // Max amount of months allowed to scroll to the past. Default = 50\r\n                    pastScrollRange={50}\r\n                    // Max amount of months allowed to scroll to the future. Default = 50\r\n                    futureScrollRange={50}\r\n                    // Specify how each item should be rendered in agenda\r\n                    renderItem={(item, firstItemInDay) => { return (<View />); }}\r\n                    // Specify how each date should be rendered. day can be undefined if the item is not first in that day.\r\n                    renderDay={(day, item) => { return (<View />); }}\r\n                    // Specify how empty date content with no items should be rendered\r\n                    renderEmptyDate={() => { return (<View />); }}\r\n                    // Specify how agenda knob should look like\r\n                    renderKnob={() => { return (<View />); }}\r\n                    // Specify what should be rendered instead of ActivityIndicator\r\n                    renderEmptyData={() => { return (<View />); }}\r\n                    // Specify your item comparison function for increased performance\r\n                    rowHasChanged={(r1, r2) => { return r1.text !== r2.text }}\r\n                    // Hide knob button. Default = false\r\n                    hideKnob={true}\r\n                    // By default, agenda dates are marked if they have at least one item, but you can override this if needed\r\n                    markedDates={{\r\n                        '2012-05-16': { selected: true, marked: true },\r\n                        '2012-05-17': { marked: true },\r\n                        '2012-05-18': { disabled: true }\r\n                    }}\r\n                    // If disabledByDefault={true} dates flagged as not disabled will be enabled. Default = false\r\n                    disabledByDefault={true}\r\n                    // If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make sure to also set the refreshing prop correctly.\r\n                    onRefresh={() => console.log('refreshing...')}\r\n                    // Set this true while waiting for new data from a refresh\r\n                    refreshing={false}\r\n                    // Add a custom RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView.\r\n                    refreshControl={null}\r\n                    // Agenda theme\r\n                    // theme={{\r\n                    //     ...calendarTheme,\r\n                    //     agendaDayTextColor: 'yellow',\r\n                    //     agendaDayNumColor: 'green',\r\n                    //     agendaTodayColor: 'red',\r\n                    //     agendaKnobColor: 'blue'\r\n                    // }}\r\n                    // // Agenda container style\r\n                    // style={{}}\r\n                />\r\n            </View>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}