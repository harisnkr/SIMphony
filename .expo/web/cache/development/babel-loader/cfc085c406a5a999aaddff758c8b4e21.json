{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-material-bottom-tabs/src/views/MaterialBottomTabView.tsx\";\nimport * as React from 'react';\nimport { ThemeContext } from 'react-navigation';\nimport { BottomNavigation } from 'react-native-paper';\n\nvar MaterialBottomTabView = function (_React$Component) {\n  _inherits(MaterialBottomTabView, _React$Component);\n\n  function MaterialBottomTabView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MaterialBottomTabView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MaterialBottomTabView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this._getColor = function (_ref) {\n      var route = _ref.route;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (_this.context === 'dark' && options.tabBarColorDark) {\n        return options.tabBarColorDark;\n      } else if (options.tabBarColorLight) {\n        return options.tabBarColorLight;\n      } else {\n        return options.tabBarColor;\n      }\n    };\n\n    _this._getactiveColor = function () {\n      var _this$props = _this.props,\n          activeColor = _this$props.activeColor,\n          activeColorLight = _this$props.activeColorLight,\n          activeColorDark = _this$props.activeColorDark;\n\n      if (_this.context === 'dark' && activeColorDark) {\n        return activeColorDark;\n      } else if (activeColorLight) {\n        return activeColorLight;\n      } else {\n        return activeColor;\n      }\n    };\n\n    _this._getInactiveColor = function () {\n      var _this$props2 = _this.props,\n          inactiveColor = _this$props2.inactiveColor,\n          inactiveColorLight = _this$props2.inactiveColorLight,\n          inactiveColorDark = _this$props2.inactiveColorDark;\n\n      if (_this.context === 'dark' && inactiveColorDark) {\n        return inactiveColorDark;\n      } else if (inactiveColorLight) {\n        return inactiveColorLight;\n      } else {\n        return inactiveColor;\n      }\n    };\n\n    _this._getBarStyle = function () {\n      var _this$props3 = _this.props,\n          barStyle = _this$props3.barStyle,\n          barStyleLight = _this$props3.barStyleLight,\n          barStyleDark = _this$props3.barStyleDark;\n      return [barStyle, _this.context === 'dark' ? barStyleDark : barStyleLight];\n    };\n\n    _this._renderIcon = function (_ref2) {\n      var route = _ref2.route,\n          focused = _ref2.focused,\n          color = _ref2.color;\n      return _this.props.renderIcon({\n        route: route,\n        focused: focused,\n        tintColor: color\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(MaterialBottomTabView, [{\n    key: \"_isVisible\",\n    value: function _isVisible() {\n      var _this$props4 = this.props,\n          navigation = _this$props4.navigation,\n          descriptors = _this$props4.descriptors;\n      var state = navigation.state;\n      var route = state.routes[state.index];\n      var options = descriptors[route.key].options;\n      return options.tabBarVisible;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          navigation = _this$props5.navigation,\n          descriptors = _this$props5.descriptors,\n          rest = _objectWithoutProperties(_this$props5, [\"navigation\", \"descriptors\"]);\n\n      var activeColor = this._getactiveColor();\n\n      var inactiveColor = this._getInactiveColor();\n\n      var barStyle = this._getBarStyle();\n\n      var isVisible = this._isVisible();\n\n      var extraStyle = isVisible === false ? {\n        display: 'none',\n        position: undefined\n      } : null;\n      return React.createElement(BottomNavigation, _extends({}, rest, {\n        activeColor: activeColor,\n        inactiveColor: inactiveColor,\n        renderIcon: this._renderIcon,\n        barStyle: [barStyle, extraStyle],\n        navigationState: navigation.state,\n        getColor: this._getColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        }\n      }));\n    }\n  }]);\n\n  return MaterialBottomTabView;\n}(React.Component);\n\nMaterialBottomTabView.contextType = ThemeContext;\nexport { MaterialBottomTabView as default };","map":{"version":3,"sources":["MaterialBottomTabView.tsx"],"names":["MaterialBottomTabView","React","Component","contextType","ThemeContext","_getColor","route","descriptors","descriptor","options","_getactiveColor","activeColor","activeColorLight","activeColorDark","_getInactiveColor","inactiveColor","inactiveColorLight","inactiveColorDark","_getBarStyle","barStyle","barStyleLight","barStyleDark","navigation","state","_renderIcon","focused","color","tintColor","rest","isVisible","extraStyle","display","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ThemeContext,\n  NavigationProp,\n  NavigationDescriptor,\n} from 'react-navigation';\nimport { BottomNavigation } from 'react-native-paper';\nimport { NavigationMaterialBottomTabConfig } from '../types';\nimport { ViewStyle } from 'react-native';\n\ntype Options = {\n  tabBarVisible?: boolean;\n  tabBarColor?: string;\n  tabBarColorLight?: string;\n  tabBarColorDark?: string;\n};\n\ntype Props = React.ComponentProps<typeof BottomNavigation> &\n  NavigationMaterialBottomTabConfig & {\n    navigation: NavigationProp<any>;\n    descriptors: { [key: string]: NavigationDescriptor<any, Options> };\n    screenProps?: unknown;\n    renderIcon: (options: {\n      route: { key: string };\n      focused: boolean;\n      tintColor: string;\n    }) => React.ReactNode;\n  };\n\nexport default class MaterialBottomTabView extends React.Component<Props> {\n  static contextType = ThemeContext;\n\n  _getColor = ({ route }: { route: { key: string } }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (this.context === 'dark' && options.tabBarColorDark) {\n      return options.tabBarColorDark;\n    } else if (options.tabBarColorLight) {\n      return options.tabBarColorLight;\n    } else {\n      return options.tabBarColor;\n    }\n  };\n\n  _getactiveColor = () => {\n    let { activeColor, activeColorLight, activeColorDark } = this.props;\n\n    if (this.context === 'dark' && activeColorDark) {\n      return activeColorDark;\n    } else if (activeColorLight) {\n      return activeColorLight;\n    } else {\n      return activeColor;\n    }\n  };\n\n  _getInactiveColor = () => {\n    let { inactiveColor, inactiveColorLight, inactiveColorDark } = this.props;\n\n    if (this.context === 'dark' && inactiveColorDark) {\n      return inactiveColorDark;\n    } else if (inactiveColorLight) {\n      return inactiveColorLight;\n    } else {\n      return inactiveColor;\n    }\n  };\n\n  _getBarStyle = () => {\n    let { barStyle, barStyleLight, barStyleDark } = this.props;\n\n    return [barStyle, this.context === 'dark' ? barStyleDark : barStyleLight];\n  };\n\n  _isVisible() {\n    const { navigation, descriptors } = this.props;\n    const { state } = navigation;\n    const route = state.routes[state.index];\n    const options = descriptors[route.key].options;\n    return options.tabBarVisible;\n  }\n\n  _renderIcon = ({\n    route,\n    focused,\n    color,\n  }: {\n    route: { key: string };\n    focused: boolean;\n    color: string;\n  }) => {\n    return this.props.renderIcon({ route, focused, tintColor: color });\n  };\n\n  render() {\n    const {\n      navigation,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors,\n      ...rest\n    } = this.props;\n\n    const activeColor = this._getactiveColor();\n    const inactiveColor = this._getInactiveColor();\n    const barStyle = this._getBarStyle();\n\n    const isVisible = this._isVisible();\n    const extraStyle: ViewStyle | null =\n      isVisible === false\n        ? {\n            display: 'none',\n            // When keyboard is shown, `position` is set to `absolute` in the library\n            // This somehow breaks `display: 'none'`, so we explcitely override `position`\n            position: undefined,\n          }\n        : null;\n\n    return (\n      <BottomNavigation\n        // Pass these for backward compaibility\n        {...rest}\n        activeColor={activeColor}\n        inactiveColor={inactiveColor}\n        renderIcon={this._renderIcon}\n        barStyle={[barStyle, extraStyle]}\n        navigationState={navigation.state}\n        getColor={this._getColor}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}