{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-material-bottom-tabs/src/navigators/createMaterialBottomTabNavigator.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { TabRouter, StackActions, SceneView, createNavigator, SwitchActions } from 'react-navigation';\nimport MaterialBottomTabView from \"../views/MaterialBottomTabView\";\nexport default function createMaterialBottomTabNavigator(routes) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var NavigationView = function (_React$Component) {\n    _inherits(NavigationView, _React$Component);\n\n    function NavigationView() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, NavigationView);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NavigationView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n      _this._renderScene = function (_ref) {\n        var route = _ref.route;\n        var _this$props = _this.props,\n            screenProps = _this$props.screenProps,\n            descriptors = _this$props.descriptors;\n        var descriptor = descriptors[route.key];\n        var TabComponent = descriptor.getComponent();\n        return React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: descriptor.navigation,\n          component: TabComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          }\n        });\n      };\n\n      _this._renderIcon = function (_ref2) {\n        var route = _ref2.route,\n            focused = _ref2.focused,\n            tintColor = _ref2.tintColor,\n            _ref2$horizontal = _ref2.horizontal,\n            horizontal = _ref2$horizontal === void 0 ? false : _ref2$horizontal;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarIcon) {\n          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n            focused: focused,\n            tintColor: tintColor,\n            horizontal: horizontal\n          }) : options.tabBarIcon;\n        }\n\n        return null;\n      };\n\n      _this._getLabelText = function (_ref3) {\n        var route = _ref3.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarLabel) {\n          return options.tabBarLabel;\n        }\n\n        if (typeof options.title === 'string') {\n          return options.title;\n        }\n\n        return route.routeName;\n      };\n\n      _this._getAccessibilityLabel = function (_ref4) {\n        var route = _ref4.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n          return options.tabBarAccessibilityLabel;\n        }\n\n        var label = _this._getLabelText({\n          route: route\n        });\n\n        if (typeof label === 'string') {\n          var _routes = _this.props.navigation.state.routes;\n          return label + \", tab, \" + (_routes.indexOf(route) + 1) + \" of \" + _routes.length;\n        }\n\n        return undefined;\n      };\n\n      _this._getTestID = function (_ref5) {\n        var route = _ref5.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        return options.tabBarTestID;\n      };\n\n      _this._getBadge = function (_ref6) {\n        var route = _ref6.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        return options.tabBarBadge;\n      };\n\n      _this._makeDefaultHandler = function (_ref7) {\n        var route = _ref7.route,\n            navigation = _ref7.navigation;\n        return function () {\n          if (navigation.isFocused()) {\n            if (route.hasOwnProperty('index') && route.index > 0) {\n              navigation.dispatch(StackActions.popToTop({\n                key: route.key\n              }));\n            } else {\n              navigation.emit('refocus');\n            }\n          } else {\n            _this._jumpTo(route.routeName);\n          }\n        };\n      };\n\n      _this._handleTabPress = function (_ref8) {\n        var route = _ref8.route;\n        _this._isTabPress = true;\n        Promise.resolve().then(function () {\n          return _this._isTabPress = false;\n        });\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var navigation = descriptor.navigation,\n            options = descriptor.options;\n\n        var defaultHandler = _this._makeDefaultHandler({\n          route: route,\n          navigation: navigation\n        });\n\n        if (options.tabBarOnPress) {\n          options.tabBarOnPress({\n            navigation: navigation,\n            defaultHandler: defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      };\n\n      _this._handleIndexChange = function (index) {\n        if (_this._isTabPress) {\n          _this._isTabPress = false;\n          return;\n        }\n\n        _this._jumpTo(_this.props.navigation.state.routes[index].routeName);\n      };\n\n      _this._jumpTo = function (routeName) {\n        var navigation = _this.props.navigation;\n        navigation.dispatch(SwitchActions.jumpTo({\n          routeName: routeName,\n          key: navigation.state.key\n        }));\n      };\n\n      _this._isTabPress = false;\n      return _this;\n    }\n\n    _createClass(NavigationView, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props2 = this.props,\n            descriptors = _this$props2.descriptors,\n            navigation = _this$props2.navigation,\n            screenProps = _this$props2.screenProps,\n            navigationConfig = _this$props2.navigationConfig;\n        var state = navigation.state;\n        var route = state.routes[state.index];\n        var descriptor = descriptors[route.key];\n\n        var options = _objectSpread({}, navigationConfig, {}, descriptor.options);\n\n        return React.createElement(MaterialBottomTabView, _extends({}, options, {\n          getLabelText: this._getLabelText,\n          getAccessibilityLabel: this._getAccessibilityLabel,\n          getTestID: this._getTestID,\n          getBadge: this._getBadge,\n          renderIcon: this._renderIcon,\n          renderScene: this._renderScene,\n          onIndexChange: this._handleIndexChange,\n          onTabPress: this._handleTabPress,\n          navigation: navigation,\n          descriptors: descriptors,\n          screenProps: screenProps,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230\n          }\n        }));\n      }\n    }]);\n\n    return NavigationView;\n  }(React.Component);\n\n  var router = TabRouter(routes, config);\n  return createNavigator(NavigationView, router, config);\n}","map":{"version":3,"sources":["createMaterialBottomTabNavigator.tsx"],"names":["config","NavigationView","React","route","screenProps","descriptors","descriptor","TabComponent","focused","tintColor","horizontal","options","label","routes","navigation","StackActions","key","Promise","defaultHandler","SwitchActions","routeName","navigationConfig","state","router","TabRouter","createNavigator"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TabRouter,\n  StackActions,\n  SceneView,\n  createNavigator,\n  SwitchActions,\n  NavigationProp,\n  NavigationScreenProp,\n  NavigationRoute,\n  NavigationDescriptor,\n  NavigationRouteConfigMap,\n  NavigationParams,\n  CreateNavigatorConfig,\n  NavigationTabRouterConfig,\n} from 'react-navigation';\nimport MaterialBottomTabView from '../views/MaterialBottomTabView';\nimport {\n  NavigationMaterialBottomTabOptions,\n  NavigationTabState,\n  NavigationMaterialBottomTabConfig,\n  NavigationTabProp,\n} from '../types';\n\nexport type RenderIconProps = {\n  route: NavigationRoute<any>;\n  focused: boolean;\n  tintColor?: string;\n  horizontal?: boolean;\n};\n\nexport type NavigationViewProps = {\n  navigation: NavigationProp<NavigationTabState>;\n  descriptors: {\n    [key: string]: NavigationDescriptor<\n      NavigationParams,\n      NavigationMaterialBottomTabOptions,\n      NavigationTabProp\n    >;\n  };\n  screenProps?: unknown;\n  navigationConfig: any;\n  getLabelText: (props: { route: NavigationRoute }) => string | undefined;\n  getAccessibilityLabel: (props: {\n    route: NavigationRoute;\n  }) => string | undefined;\n  getTestID: (props: { route: NavigationRoute }) => string | undefined;\n  renderIcon: (props: RenderIconProps) => React.ReactNode;\n  renderScene: (props: { route: NavigationRoute }) => React.ReactNode;\n  onIndexChange: (index: number) => void;\n  onTabPress: (props: { route: NavigationRoute }) => void;\n};\n\nexport default function createMaterialBottomTabNavigator(\n  routes: NavigationRouteConfigMap<\n    NavigationMaterialBottomTabOptions,\n    NavigationTabProp<NavigationRoute, any>\n  >,\n  config: CreateNavigatorConfig<\n    NavigationMaterialBottomTabConfig,\n    NavigationTabRouterConfig,\n    NavigationMaterialBottomTabOptions,\n    NavigationTabProp<NavigationRoute, any>\n  > = {}\n) {\n  class NavigationView extends React.Component<NavigationViewProps> {\n    _renderScene = ({ route }: { route: { key: string } }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return (\n        <SceneView\n          screenProps={screenProps}\n          navigation={descriptor.navigation}\n          component={TabComponent}\n        />\n      );\n    };\n\n    _renderIcon = ({\n      route,\n      focused,\n      tintColor,\n      horizontal = false,\n    }: RenderIconProps) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function'\n          ? options.tabBarIcon({ focused, tintColor, horizontal })\n          : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _getAccessibilityLabel = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n        return options.tabBarAccessibilityLabel;\n      }\n\n      const label = this._getLabelText({ route });\n\n      if (typeof label === 'string') {\n        const { routes } = this.props.navigation.state;\n        return `${label}, tab, ${routes.indexOf(route) + 1} of ${\n          routes.length\n        }`;\n      }\n\n      return undefined;\n    };\n\n    _getTestID = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarTestID;\n    };\n\n    _getBadge = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarBadge;\n    };\n\n    _makeDefaultHandler = ({\n      route,\n      navigation,\n    }: {\n      route: NavigationRoute;\n      navigation: NavigationScreenProp<any>;\n    }) => () => {\n      if (navigation.isFocused()) {\n        if (route.hasOwnProperty('index') && route.index > 0) {\n          // If current tab has a nested navigator, pop to top\n          navigation.dispatch(StackActions.popToTop({ key: route.key }));\n        } else {\n          // @ts-ignore\n          navigation.emit('refocus');\n        }\n      } else {\n        this._jumpTo(route.routeName);\n      }\n    };\n\n    _handleTabPress = ({ route }: { route: NavigationRoute }) => {\n      this._isTabPress = true;\n\n      // After tab press, handleIndexChange will be called synchronously\n      // So we reset it in promise callback\n      Promise.resolve().then(() => (this._isTabPress = false));\n\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleIndexChange = (index: number) => {\n      if (this._isTabPress) {\n        this._isTabPress = false;\n        return;\n      }\n\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\n    };\n\n    _jumpTo = (routeName: string) => {\n      const { navigation } = this.props;\n\n      navigation.dispatch(\n        SwitchActions.jumpTo({\n          routeName,\n          key: navigation.state.key,\n        })\n      );\n    };\n\n    _isTabPress: boolean = false;\n\n    render() {\n      const {\n        descriptors,\n        navigation,\n        screenProps,\n        navigationConfig,\n      } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n      const options = {\n        ...navigationConfig,\n        ...descriptor.options,\n      };\n\n      return (\n        <MaterialBottomTabView\n          {...options}\n          getLabelText={this._getLabelText}\n          getAccessibilityLabel={this._getAccessibilityLabel}\n          getTestID={this._getTestID}\n          getBadge={this._getBadge}\n          renderIcon={this._renderIcon}\n          renderScene={this._renderScene}\n          onIndexChange={this._handleIndexChange}\n          onTabPress={this._handleTabPress}\n          navigation={navigation}\n          descriptors={descriptors}\n          screenProps={screenProps}\n        />\n      );\n    }\n  }\n\n  const router = TabRouter(routes, config as any);\n\n  // TODO: don't have time to fix it right now\n  // @ts-ignore\n  return createNavigator(NavigationView, router, config as any);\n}\n"]},"metadata":{},"sourceType":"module"}