{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-native-paper/src/components/RadioButtonAndroid.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport TouchableRipple from \"./TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\nvar BORDER_WIDTH = 2;\n\nvar RadioButtonAndroid = function (_React$Component) {\n  _inherits(RadioButtonAndroid, _React$Component);\n\n  function RadioButtonAndroid() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RadioButtonAndroid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RadioButtonAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      borderAnim: new Animated.Value(BORDER_WIDTH),\n      radioAnim: new Animated.Value(1)\n    };\n    return _this;\n  }\n\n  _createClass(RadioButtonAndroid, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.status === this.props.status) {\n        return;\n      }\n\n      if (this.props.status === 'checked') {\n        this.state.radioAnim.setValue(1.2);\n        Animated.timing(this.state.radioAnim, {\n          toValue: 1,\n          duration: 150\n        }).start();\n      } else {\n        this.state.borderAnim.setValue(10);\n        Animated.timing(this.state.borderAnim, {\n          toValue: BORDER_WIDTH,\n          duration: 150\n        }).start();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"onPress\", \"theme\"]);\n\n      var checkedColor = this.props.color || theme.colors.accent;\n      var uncheckedColor = this.props.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n      var rippleColor, radioColor;\n      var checked = this.props.status === 'checked';\n\n      if (disabled) {\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n        radioColor = theme.colors.disabled;\n      } else {\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\n        radioColor = checked ? checkedColor : uncheckedColor;\n      }\n\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: disabled ? undefined : function () {\n          onPress && onPress(_this2.props.value);\n        },\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : [],\n        accessibilityLiveRegion: \"polite\",\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        }\n      }), React.createElement(Animated.View, {\n        style: [styles.radio, {\n          borderColor: radioColor,\n          borderWidth: this.state.borderAnim\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        }\n      }, checked ? React.createElement(View, {\n        style: [StyleSheet.absoluteFill, styles.radioContainer],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.dot, {\n          backgroundColor: radioColor,\n          transform: [{\n            scale: this.state.radioAnim\n          }]\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        }\n      })) : null));\n    }\n  }]);\n\n  return RadioButtonAndroid;\n}(React.Component);\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\nexport default withTheme(RadioButtonAndroid);\nexport { RadioButtonAndroid };","map":{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["BORDER_WIDTH","RadioButtonAndroid","React","Component","displayName","state","borderAnim","Animated","radioAnim","prevProps","toValue","duration","disabled","onPress","theme","rest","checkedColor","uncheckedColor","color","checked","rippleColor","radioColor","styles","borderColor","borderWidth","StyleSheet","backgroundColor","transform","scale","container","borderRadius","radioContainer","alignItems","justifyContent","radio","height","width","margin","dot","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  borderAnim: Animated.Value;\n  radioAnim: Animated.Value;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonAndroid extends React.Component<Props, State> {\n  static displayName = 'RadioButton.Android';\n\n  state = {\n    borderAnim: new Animated.Value(BORDER_WIDTH),\n    radioAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    if (this.props.status === 'checked') {\n      this.state.radioAnim.setValue(1.2);\n\n      Animated.timing(this.state.radioAnim, {\n        toValue: 1,\n        duration: 150,\n      }).start();\n    } else {\n      this.state.borderAnim.setValue(10);\n\n      Animated.timing(this.state.borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150,\n      }).start();\n    }\n  }\n\n  render() {\n    const { disabled, onPress, theme, ...rest } = this.props;\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor, radioColor;\n\n    const checked = this.props.status === 'checked';\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n      radioColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n      radioColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={\n          disabled\n            ? undefined\n            : () => {\n                onPress && onPress(this.props.value);\n              }\n        }\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType={\n          checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n        }\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <Animated.View\n          style={[\n            styles.radio,\n            {\n              borderColor: radioColor,\n              borderWidth: this.state.borderAnim,\n            },\n          ]}\n        >\n          {checked ? (\n            <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n              <Animated.View\n                style={[\n                  styles.dot,\n                  {\n                    backgroundColor: radioColor,\n                    transform: [{ scale: this.state.radioAnim }],\n                  },\n                ]}\n              />\n            </View>\n          ) : null}\n        </Animated.View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nexport { RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"module"}